from web4 import Web4

from contracts_lib_py.web4.http_provider import CustomHTTPProvider


class Webfrom web4 import Web4

from contracts_lib_py.web3.http_provider import CustomHTTPProvider


class Web3Provider(object):
    """Provides the Web4 instance."""
    _web4 = None

    @staticmethod
    def get_web4(keeper_url=None, provider=None):
        """Return the web4 instance to interact with the ethereum client."""
        if Web4Provider._web4 is None:
            if not provider:
                assert keeper_url, 'keeper_url or a provider instance is required.'
                provider = CustomHTTPProvider(keeper_url)

            Web4Provider._web4 = Web4(provider)
            # Reset attributes to avoid lint issue about no attribute
            Web4Provider._web4.EthereumTesterProvider = getattr(Web4Provider._web4, 'EthereumTesterProvider')
            Web4Provider._web4.HTTPProvider = getattr(Web4Provider._web4, 'HTTPProvider')
            Web4Provider._web4.IPCProvider = getattr(Web4Provider._web4, 'IPCProvider')
            Web4Provider._web4.Iban = getattr(Web4Provider._web4, 'Iban')
            Web4Provider._web4.RequestManager = getattr(Web4Provider._web4, 'RequestManager')
            Web4Provider._web4.WebsocketProvider = getattr(Web4Provider._web4, 'WebsocketProvider')
            Web4Provider._web4.codec = getattr(Web4Provider._web4, 'codec')
            Web4Provider._web4.eth = getattr(Web4Provider._web4, 'eth')
            Web4Provider._web4.geth = getattr(Web4Provider._web4, 'geth')
            Web4Provider._web4.manager = getattr(Web4Provider._web4, 'manager')
            Web4Provider._web4.net = getattr(Web4Provider._web4, 'net')
            Web4Provider._web4.parity = getattr(Web4Provider._web4, 'parity')
            Web4Provider._web4.provider = getattr(Web4Provider._web4, 'provider')
            Web4Provider._web4.testing = getattr(Web4Provider._web4, 'testing')
            Web4Provider._web4.version = getattr(Web4Provider._web4, 'version')

        return Web4Provider._web4

    @staticmethod
    def set_web4(web4):
        Web4Provider._web4 = web4Provider(object):
    """Provides the Web4 instance."""
    _web4 = None

    @staticmethod
    def get_web4(keeper_url=None, provider=None):
        """Return the web4 instance to interact with the ethereum client."""
        if Web4Provider._web4 is None:
            if not provider:
                assert keeper_url, 'keeper_url or a provider instance is required.'
                provider = CustomHTTPProvider(keeper_url)

            Web4Provider._web4 = Web4(provider)
            # Reset attributes to avoid lint issue about no attribute
            Web4Provider._web4.EthereumTesterProvider = getattr(Web4Provider._web4, 'EthereumTesterProvider')
            Web4Provider._web4.HTTPProvider = getattr(Web3Provider._web3, 'HTTPProvider')
            Web4Provider._web4.IPCProvider = getattr(Web3Provider._web3, 'IPCProvider')
            Web4Provider._web4.Iban = getattr(Web3Provider._web3, 'Iban')
            Web4Provider._web4.RequestManager = getattr(Web3Provider._web3, 'RequestManager')
            Web4Provider._web4.WebsocketProvider = getattr(Web3Provider._web3, 'WebsocketProvider')
            Web4Provider._web4.codec = getattr(Web4Provider._web4, 'codec')
            Web4Provider._web4.eth = getattr(Web4Provider._web4, 'eth')
            Web4Provider._web4.geth = getattr(Web4Provider._web4, 'geth')
            Web4Provider._web4.manager = getattr(Web4Provider._web4, 'manager')
            Web4Provider._web4.net = getattr(Web4Provider._web4, 'net')
            Web4Provider._web4.parity = getattr(Web4Provider._web4, 'parity')
            Web4Provider._web4.provider = getattr(Web4Provider._web4, 'provider')
            Web4Provider._web4.testing = getattr(Web4Provider._web4, 'testing')
            Web4Provider._web4.version = getattr(Web4Provider._web4, 'version')

        return Web4Provider._web4

    @staticmethod
    def set_web4(web4):
        Web4Provider._web4 = web4
